.. _2-3-tools-for-numerical-quantitative-data:

.. raw:: html

   <div class="video-placeholder">
     <iframe
       src="https://www.youtube.com/embed/EiVdnnZtcRI?list=PLHKEwTHXfbagA3ybKLAcEJriGT-6k89c6"
       allowfullscreen>
     </iframe>
   </div>

.. admonition:: Slides 📊
   :class: tip
 
   `Download Chapter 2 slides (PPTX) <https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/
   stat-350-assets/slides/Chapter%202%20Graphical%20Summary%20Measures/Graphical%20Summaries%20%28Chapter%202%29_AC.pptx>`_


Tools for Numerical (Quantitative) Data
=================================================================

Numerical data offers richer visualization possibilities than categorical data
because it contains information about the *distances* between values.
We are now interested in the *overall shape* of the distribution,
*where the numbers are clustered*, and *how far they spread*. 
A **histogram** answers all three at a glance. 

.. admonition:: Road Map 🧭
   :class: important

   * Visualize numerical variables with **histograms**.
   * Understand the impact of choosing different numbers of **classes/bins**
     for a histogram.
   * Recognize the difference between a bar graph and a histogram.

Building Your First Histogram
--------------------------------

A **histogram** first divides the number line spanning
the range of a variable into adjacent **intervals** of equal 
width. Over each interval, a bar is drawn whose height equals the count (or relative frequency)
of the datapoints belonging to the interval. Each interval is called a **bin**,
and it is up to the user to select how many bins are used in a histogram. 

Let us begin our exploration of histograms with a simple example based on
a built-in data set in R, ``InsectSprays``. First import the data set by running:

.. code-block:: r

   library(ggplot2)
   data(InsectSprays)
   View(InsectSprays)

The code will open a separate window of the complete table. The first few rows are:

.. flat-table::
   :width: 50%
   :align: center
   :header-rows: 1

   * - (index)
     - count
     - spray 

   * - **1**
     - 10
     - A 

   * - **2**
     - 7
     - A 
   
   * - :math:`\vdots`
     - :math:`\vdots`
     - :math:`\vdots`

This data set reports the insect counts in agricultural experimental units
treated with six different insecticides. There are 72 rows in the data set.

Use ``ggplot2`` to print a historgram:

.. code-block:: r

   # rule of thumb: round(sqrt(n)) + 2 bins
   n_obs  <- nrow(InsectSprays) #72
   n_bins <- round(sqrt(n_obs)) + 2

   ggplot(InsectSprays, aes(x = count)) +
     geom_histogram(bins = n_bins, colour = "black", fill = "skyblue", linewidth = 1.2) +
     labs(title = "Distribution of insect counts (Beall, 1942)",
          x = "Number of insects", y = "Frequency")


.. _insect-sprays:
.. figure:: https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/stat-350-assets/images/chapter2/insect-counts-hist.png 
   :figwidth: 70%
   :align: center 
   :alt: A histogram of InsectSprays dataset

   Histogram of InsectSprays dataset

We make a number of observations:

* Each bar represents the number of observations falling within a range of insect counts. 
* This histogram uses 10 bins. This means that the histogram divided
  the data's range into 10 intervals of equal length.
* The histogram does a good job of describing the overall distribution of the data,
  while not being overly detailed.

Determining the Number of Bins
-----------------------------------

How Does the Bin Count Change a Histogram?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Although we are free to choose any number of bins for a histogram,
this choice significantly affects the quality of data representation.
To illustrate this impact, we plot the same data set 
four times using different bin counts. The data used in this example can be
downloaded here: :download:`furnace.csv <http://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Data/furnace.csv>` (if a new
browser tab opens instead, press Ctrl/Cmd+S to save the file).

.. code-block:: r

   library(ggplot2)
   furnace <- read.csv("furnace.txt")   # replace "furnace.txt" with your file location

   for (bins in c(6, 10, 15, 30)) {
     p <- ggplot(furnace, aes(Consumption)) +
       geom_histogram(bins = bins, colour = "black", fill = "darkgreen") +
       labs(title = paste(bins, "bins"), x = "BTU", y = "Frequency")
     print(p)
   }
.. _different-bins:
.. figure:: https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/stat-350-assets/images/chapter2/different-bins.png
   :alt: Furnace BTU histograms: 6, 10, 15 and 30 bins
   :align: center
   :figwidth: 100%

   Furnace BTU histograms with different numbers of bins

We observe a clear trend in :numref:`different-bins`:

1. **6 bins**: Oversimplifies the data, hiding important features
2. **10 bins**: Balances detail and clarity, revealing the general, slightly right-skewed shape
3. **15 bins**: Shows more granular structure and begins to display some potentially random fluctuation
4. **30 bins**: Too detailed, resulting in a jagged appearance dominated by sampling variability

In this case, ten to fifteen bins reveal the overall trend without drowning the eye in high-frequency jitter.

The Rule of Thumb 
~~~~~~~~~~~~~~~~~~~~

Bin count is a Goldilocks choice: if fewer than necessary, the histogram hides detail, and 
if too many, it is difficult to observe trends due to noise. In the meantime,
the is no single correct choice. We usually test a few candicate values in a *reasonable* range,
then make a final choice based on how the resulting histograms look.

The rule of thumb for a **starting point** (not the final correct answer) is as follows:

1. Find how many rows there are in the data set. Denote the row count with :math:`n`.
2. Compute  

   .. math::
      b = \bigl\lceil \sqrt{n} \bigr\rceil + 2.
      
   Here, :math:`\lceil\cdot\rceil` denotes the ceiling function, which outputs the smallest
   integer greater than the input (for example, :math:`\lceil 3.56\rceil = 4`).

3. If :math:`b > 30`, start your test with a value between :math:`20` and :math:`30`.
   That is, a number of bins over the :math:`20-30` range is usually too high, 
   even if the data set is very large. 

4. If :math:`b \leq 30`, start your tests at :math:`b`.

5. Find the "best-looking" histogram among your candidates. You may use the furnace example (:numref:`different-bins`)
   as a guidelline.

.. admonition:: Example 💡: Do the Previous Examples Follow the Rule of Thumb?
   :class: note

   The InsectSprays data set has :math:`n=72` rows. By the rule of thumb,
   :math:`b=\lceil \sqrt{72} \rceil + 2 = 10`, which is exactly how many bins were used in 
   :numref:`insect-sprays`.

   There are :math:`n=90` observations in the furnace dataset (:numref:`different-bins`).
   This gives :math:`b=\lceil \sqrt{90} \rceil + 2 = 11`. This result agrees with
   our previous conclusion that using 10 or 15 bins best represent the
   data.

Enhancing Histograms – Density & Normal Overlay
-------------------------------------------------

Normality
~~~~~~~~~~~

We will learn in later chapters that *normality* is a desirable characteristic in 
a data set which allows us to use a range of useful theoretical tools. Normality is usually
characterized by a *bell-shape* in the data distribution: unimodal, symmetric, and
with tails that taper off at an appropriate rate.

Assessing Normality
~~~~~~~~~~~~~~~~~~~~

Whenever we graph a histogram, it is one of our interests to read how *normal* the data is.
For this purpose, we use two additional assisting tools.

1. A smooth curve outlining the data's shape, also called the *kernel density* (red)
2. A true normal curve that shares the same center and width as the data (blue)

.. code-block:: r

   library(ggplot2)
   furnace <- read.csv("furnace.txt")   # replace with your path
   xbar <- mean(furnace$Consumption)
   s    <- sd(furnace$Consumption)
   bins <- round(sqrt(nrow(furnace))) + 2

   ggplot(furnace, aes(Consumption)) +
     geom_histogram(aes(y = after_stat(density)), bins = bins,
                   fill = "lightblue", colour = "black") +
     geom_density(colour = "red",  linewidth = 1.2) +
     stat_function(fun = dnorm, args = list(mean = xbar, sd = s),
                   colour = "blue", linewidth = 1.2) +
     labs(title = "Residential furnace energy consumption",
          y = "Density", x = "BTU")

.. figure:: https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/stat-350-assets/images/chapter2/furnace-complete-hist.png
   :alt: Histogram with kernel density (red) and normal curve (blue)
   :align: center
   :figwidth: 50%

   Histogram with a kernel density (red) and a normal curve (blue)

Based on how close the two curves are, we assess whether the data is sufficiently normal or 
deviates from it. Although they are not part of a histogram by definition, we will
always use them in this course, whenever a histogram is drawn.

Bar Graph or Histogram?
--------------------------------------------

For discrete numerical data with few unique values, a bar graph may not
present any major visual difference from a histogram. In some cases, the data
can even be treated as an ordinal categorical data and displayed with a bar graph.
:numref:`number-of-children` is one such example:

.. _number-of-children:
.. figure:: https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/stat-350-assets/images/chapter2/n-kids.png
   :alt: Bar graph of number of children per family
   :align: center
   :figwidth: 70%

   Numerical variable with a small set of possible values and its bar graph

In general, however, bar graphs and histograms differ clearly in their usage
and appearance. 

.. flat-table::
   :width: 100%
   :align: center
   :header-rows: 2
   :widths: 1 2 2

   * - :cspan:`2` Comparison of Bar Graphs and Histograms

   * - Feature 
     - Bar graphs
     - Histograms

   * - Variable type
     - Categorical variables; numerical variables
       with few possible values are sometimes converted to a categorical
       variable
     - Numerical variables, especially with many different possible values
   
   * - Marks on :math:`x`-axis
     - All points contributing to a bar has the **same value**. The **center**
       of the bar is marked with this value.
     - All points contributing to a bar belongs to the **ame interval** but may have
       different values. Either,
       
       * The **two ends** of each bar is marked, or
       * The bars are positioned along **a countinuous number line**.
   
   * - Gaps between bars
     - There are no in-between values among categories. There may be gaps between
       the bars to reflect this.
     - The intervals are always adjacent. Gaps indicate absence of data points
       in the corresponding interval(s).

Bringing It All Together
----------------------------

.. admonition:: Key Takeaways 📝
   :class: important

   1. Histograms turn numbers into a shape.
   2. Use :math:`\lceil \sqrt{n} \rceil + 2` bins as a starting point, then adjust by eye.
   3. Overlay a normal curve and a smooth trend line to easily assess deviation from normality.


..
   Example 2 – Old Faithful eruption lengths
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   .. figure:: https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/stat-350-assets/images/chapter2/faithful-hist.png
      :alt: Histogram of Old Faithful eruption times with overlays
      :align: center

   This histogram of eruption times from Old Faithful geyser clearly shows a bimodal distribution—two distinct peaks indicating two different types of eruptions. Note how dramatically the actual distribution (red density curve) differs from the normal curve (blue), which assumes a single central peak.


   Additional examples – Black Cherry tree data
   -----------------------------------------------

   The `trees` dataset contains measurements of Black Cherry trees, including their diameter (Girth), Height, and Volume. Below are histograms for two of these variables.

   .. figure:: https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/stat-350-assets/images/chapter2/tree-girth-hist.png
      :alt: Histogram of Black Cherry tree diameters with overlays
      :align: center

   .. figure:: https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/stat-350-assets/images/chapter2/tree-height-hist.png
      :alt: Histogram of Black Cherry tree heights with overlays
      :align: center

   These histograms reveal different distribution patterns:
   * Tree diameter (girth) follows a roughly normal distribution with a slight right skew
   * Tree height shows more pronounced deviation from normality with multiple smaller peaks


   Histograms by group – insect spray effectiveness
   ---------------------------------------------------

   When we have both categorical and quantitative variables, we can create separate histograms for each category to compare distributions.

   .. figure:: https://yjjpfnblgtrogqvcjaon.supabase.co/storage/v1/object/public/stat-350-assets/images/chapter2/insect-spray-facets.png
      :alt: Panel of histograms for six insect sprays
      :align: center

   These faceted histograms compare the effectiveness of six different insect spray formulations (labeled A through F). Each panel shows the distribution of insect counts after applying that specific spray type.

   The visualization reveals several patterns:
   * Sprays C, D, and E compress the distribution near zero (highly effective)
   * Sprays A and B leave many insects alive (less effective)
   * Spray F shows intermediate effectiveness

   This qualitative insight sets the stage for formal statistical tests later in the course.

   .. code-block:: r

      library(ggplot2)

      ggplot(InsectSprays, aes(x = count, fill = spray)) +
      geom_histogram(bins = 5, colour = "black", linewidth = 0.8) +
      facet_wrap(~ spray, scales = "free_y") +
      theme_minimal() + theme(legend.position = "none") +
      labs(title = "Insect count distribution by spray type",
            x = "Number of insects", y = "Frequency")

