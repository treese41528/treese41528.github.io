.. _r_computer_assignments:

R / RStudio Guide and Function Reference
==================================================

.. contents::
   :local:
   :depth: 2

Overview
-------------------------------------------------

This document is a comprehensive reference for the **primary R tools** used in STAT 350. It introduces R and RStudio, outlines the workflow we use in class, and provides an **enhanced reference** to the functions, libraries, and plotting layers that appear across the computer assignments and worksheets. The emphasis is on: loading data; validating and cleaning; visualizing; computing summaries; fitting models; **checking assumptions**; and performing inference with well-annotated code.

Use this as a companion to the assignment tutorials (linked below).

Quick Reference Table
-------------------------------------------------

.. csv-table:: Common Tasks Quick Reference
   :header: "Task", "Function(s)", "Example"
   :widths: 25, 25, 50
   :align: left

   "Import CSV", "``read.csv()``", "``d <- read.csv('data/AppRating.csv')``"
   "Check structure", "``str()``, ``head()``", "``str(d); head(d, 10)``"
   "Remove NAs", "``complete.cases()``", "``d_clean <- d[complete.cases(d), ]``"
   "Basic summary", "``summary()``", "``summary(d$score)``"
   "Create histogram", "``ggplot() + geom_histogram()``", "``ggplot(d, aes(x=score)) + geom_histogram()``"
   "One-sample t-test", "``t.test()``", "``t.test(d$score, mu = 3)``"
   "Two-sample t-test", "``t.test()``", "``t.test(score ~ platform, data = d)``"
   "One-way ANOVA", "``aov()``", "``fit <- aov(score ~ group, data = d)``"
   "Linear regression", "``lm()``", "``mod <- lm(rating ~ price, data = d)``"
   "Check residuals", "``plot()``", "``plot(mod, which = 1:2)``"

Quick Start: R / RStudio Setup
-------------------------------------------------

- Local Install (R/RStudio): `Local Install <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Local_Install.html>`_
- Scholar Access (cluster): `Scholar Access <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Scholar-Access.html>`_

Recommended workflow
~~~~~~~~~~~~~~~~~~~~~~~~
1. **Create an RStudio Project** for the course.
2. Keep a top-level folder for data (e.g., ``data/``). Store the course CSV (e.g., ``AppRatingFall2025.csv``) there.
3. Write analyses in **scripts** (``.R``) or **R Markdown** (if you want knit-able reports).
4. Use **relative paths** (avoid changing working directory mid-script).
5. Save figures/tables explicitly if you will reuse them in the report or Brightspace.

Course Pipeline (At a Glance)
-------------------------------------------------

1. **Import**: ``read.csv`` → **inspect** with ``head``, ``str``, ``summary``.
2. **Validate & clean**: missing data (``is.na``, ``complete.cases``), types (``as.numeric``, ``factor``), quick checks (``length``, ``nrow``, ``unique``).
3. **Explore**: core summaries (``mean``, ``median``, ``sd``, ``quantile``, ``IQR``), plots (``ggplot2`` histograms/boxplots).
4. **Model**: one/two-sample t; ANOVA; SLR via ``lm``; compute p-values/intervals; **diagnostics** (residual plots, QQ).
5. **Report**: figures/tables (``ggplot2``, ``knitr::kable`` + ``kableExtra``), short text with context.

Packages / Libraries (Course Set)
-------------------------------------------------

- **ggplot2** — Grammar of Graphics. Histograms, boxplots, QQ, scatter + fit lines, ribbons for intervals.
- **grid**, **gridExtra** — Plot/table layout (e.g., arrange multiple graphics on a page).
- **kableExtra** — Styling for ``knitr::kable`` tables (borders, alignment).
- **knitr** — Report tooling; ``kable`` produces clean tables.
- **latex2exp** — ``TeX()`` for LaTeX-style math in plot labels.
- **magrittr** — Pipe operator ``%>%`` to chain steps.
- **stats** — Inference & models: ``aov``, ``anova``, ``lm``, ``t.test``, ``TukeyHSD``, distributions (``dnorm``, ``qnorm``, ``pt``, ``qt``), etc.
- **utils** — I/O like ``read.csv``, ``write.csv``.

.. tip::
   Install from CRAN if needed:
   ::
      install.packages(c("ggplot2","knitr","kableExtra","latex2exp","gridExtra"))

RStudio Orientation
-------------------------------------------------

- **Console** (executes statements), **Source/Editor** (scripts, Rmd), **Environment** (objects), **Plots/Help** (graphics, docs).
- Use **Projects** to lock working directory. Prefer relative paths and **never** hardcode machine-specific directories mid-script.
- Keep code modular. Consider separate chunks for import, cleaning, EDA, modeling, diagnostics, and reporting.

Assignment Tutorials (Links)
-------------------------------------------------

- **Computer Assignment 1 Tutorial** — Intro & basics:
  `CA1 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_1_Tutorial.html>`_
- **Computer Assignment 2 Tutorial** — Graphical & numerical summaries:
  `CA2 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_2_Graphical_and_Numerical_Summaries_Tutorial.html>`_
- **Computer Assignment 3 Tutorial** — Subsetting & basic hypothesis testing:
  `CA3 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_3_BasicHypothesisTesting_and_subsetting_Tutorial.html>`_
- **Computer Assignment 4 Tutorial** — Two-sample procedures:
  `CA4 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_4_TwoSampleProcedures_Tutorial.html>`_
- **Computer Assignment 5 Tutorial** — One-way ANOVA:
  `CA5 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_5_ANOVA_Tutorial.html>`_
- **Computer Assignment 6 Tutorial** — Simple linear regression:
  `CA6 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_6_SimpleLinearRegression_Tutorial.html>`_

Function Reference (Alphabetized within Category)
-------------------------------------------------

Data I/O & Housekeeping
~~~~~~~~~~~~~~~~~~~~~~~~

**getwd()**

   *Purpose*: Show current working directory  
   *Help*: Type ``?getwd`` in R console  
   *Syntax*: ``getwd()``  
   *Example*:  
   .. code-block:: r

      getwd()
      # Output: [1] "/Users/username/STAT350"

**head(x, n = 6)**

   *Purpose*: Display first n rows of a data frame or elements of a vector  
   *Help*: Type ``?head`` in R console  
   *Syntax*: ``head(x, n = 6)``  
   *Common use*: Quickly inspect data after importing  
   *Example*:  
   .. code-block:: r

      d <- read.csv("data/AppRating.csv")
      head(d, 10)  # Shows first 10 rows
      # Output shows column names and first 10 observations
   
   *See also*: ``tail()``, ``str()``, ``summary()``

**read.csv(file, header = TRUE, stringsAsFactors = FALSE, ...)**

   *Purpose*: Import CSV file into a data frame  
   *Help*: Type ``?read.csv`` in R console  
   *Key arguments*:
   
   - ``header``: First row contains column names (default TRUE)
   - ``stringsAsFactors``: Keep strings as characters (recommended FALSE)
   - ``na.strings``: Values to treat as NA (default "NA")
   
   *Common pitfalls*:
   
   - Using absolute paths (breaks on other computers)
   - Forgetting to check for proper import with ``str()``
   - Not handling special characters in column names
   
   *Examples*:  
   .. code-block:: r

      # Basic import
      d <- read.csv("data/AppRating.csv")
      
      # With options
      d <- read.csv("data/AppRating.csv", 
                    stringsAsFactors = FALSE,
                    na.strings = c("NA", "N/A", ""))
      
      # Always check import
      str(d)  # Check structure
      head(d) # Check first rows
      sum(is.na(d))  # Check for NAs
   
   *See also*: ``read.table()``, ``write.csv()``, ``str()``

**setwd(path)**

   *Purpose*: Change working directory  
   *Help*: Type ``?setwd`` in R console  
   *Warning*: Avoid using in scripts; use RStudio Projects instead  
   *Example*:  
   .. code-block:: r

      # Not recommended in scripts!
      # setwd("/Users/username/STAT350")
      
      # Better: Use RStudio Projects or relative paths

**write.csv(x, file, row.names = FALSE)**

   *Purpose*: Export data frame to CSV file  
   *Help*: Type ``?write.csv`` in R console  
   *Key arguments*:
   
   - ``row.names``: Include row numbers (usually FALSE)
   - ``na``: String for missing values (default "NA")
   
   *Example*:  
   .. code-block:: r

      # Save cleaned data
      write.csv(d_clean, "output/cleaned_data.csv", row.names = FALSE)
      
      # With custom NA representation
      write.csv(results, "output/results.csv", 
                row.names = FALSE, 
                na = "missing")

Data Structures & Creation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**c(...)**

   *Purpose*: Combine values into a vector  
   *Help*: Type ``?c`` in R console  
   *Examples*:  
   .. code-block:: r

      # Numeric vector
      v1 <- c(1, 2, 3, 4, 5)
      
      # Character vector
      v2 <- c("iOS", "Android", "Windows")
      
      # Mixed types get coerced
      v3 <- c(1, "two", 3)  # All become characters
      class(v3)  # Output: [1] "character"

**colnames(x), rownames(x)**

   *Purpose*: Get or set column/row names  
   *Help*: Type ``?colnames`` or ``?rownames`` in R console  
   *Examples*:  
   .. code-block:: r

      # Get column names
      colnames(d)
      
      # Rename columns
      colnames(d)[1] <- "AppID"
      
      # Rename all at once
      colnames(d) <- c("id", "platform", "rating", "price")

**data.frame(...)**

   *Purpose*: Create a data frame from vectors  
   *Help*: Type ``?data.frame`` in R console  
   *Key arguments*:
   
   - ``stringsAsFactors``: Auto-convert strings to factors (set FALSE)
   
   *Examples*:  
   .. code-block:: r

      # Create from scratch
      df <- data.frame(
        id = 1:5,
        group = c("A", "A", "B", "B", "B"),
        score = c(85, 90, 78, 82, 88),
        stringsAsFactors = FALSE
      )
      
      # Check structure
      str(df)
      # 'data.frame': 5 obs. of 3 variables:
      # $ id   : int  1 2 3 4 5
      # $ group: chr  "A" "A" "B" "B" "B"
      # $ score: num  85 90 78 82 88
   
   *See also*: ``tibble::tibble()`` for modern alternative

**factor(x, levels = ..., ordered = FALSE)**

   *Purpose*: Create categorical variables with defined levels  
   *Help*: Type ``?factor`` in R console  
   *When to use*: For categorical data in ANOVA, controlling plot order  
   *Examples*:  
   .. code-block:: r

      # Basic factor
      platform <- factor(c("iOS", "Android", "iOS", "Windows"))
      levels(platform)  # Output: [1] "Android" "iOS" "Windows"
      
      # Control level order
      platform <- factor(platform, 
                        levels = c("iOS", "Android", "Windows"))
      
      # Ordered factor (for ordinal data)
      satisfaction <- factor(c("Low", "High", "Medium", "High"),
                            levels = c("Low", "Medium", "High"),
                            ordered = TRUE)
   
   *Common pitfalls*:
   
   - Forgetting to set levels (uses alphabetical order)
   - Converting numbers stored as factors back to numeric
   
   .. code-block:: r

      # Wrong way to convert factor to numeric
      f <- factor(c("2", "4", "6"))
      as.numeric(f)  # Output: [1] 1 2 3 (level indices!)
      
      # Correct way
      as.numeric(as.character(f))  # Output: [1] 2 4 6
   
   *See also*: ``levels()``, ``relevel()``, ``droplevels()``

Data Wrangling & Utilities
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**apply(X, MARGIN, FUN)**

   *Purpose*: Apply function over matrix/array margins  
   *Help*: Type ``?apply`` in R console  
   *Key arguments*:
   
   - ``MARGIN``: 1 for rows, 2 for columns
   - ``FUN``: Function to apply
   
   *Examples*:  
   .. code-block:: r

      # Create matrix
      M <- matrix(1:12, nrow = 3)
      
      # Row means (MARGIN = 1)
      apply(M, 1, mean)  # Output: [1] 5.5 6.5 7.5
      
      # Column sums (MARGIN = 2)
      apply(M, 2, sum)   # Output: [1] 6 15 24 33
      
      # Custom function
      apply(M, 2, function(x) max(x) - min(x))  # Range per column
   
   *See also*: ``lapply()``, ``sapply()``, ``tapply()``

**as.numeric(x)**

   *Purpose*: Convert to numeric type  
   *Help*: Type ``?as.numeric`` in R console  
   *Common uses*: Fix data imported as characters, convert factors  
   *Examples*:  
   .. code-block:: r

      # Character to numeric
      x <- c("1.5", "2.3", "3.1")
      as.numeric(x)  # Output: [1] 1.5 2.3 3.1
      
      # Factor to numeric (careful!)
      f <- factor(c("2", "4", "6"))
      as.numeric(as.character(f))  # Correct way
      
      # Handle non-numeric gracefully
      y <- c("1", "2", "three")
      as.numeric(y)  # Output: [1] 1 2 NA
      # Warning: NAs introduced by coercion

**complete.cases(x)**

   *Purpose*: Identify rows with no missing values  
   *Help*: Type ``?complete.cases`` in R console  
   *Returns*: Logical vector (TRUE for complete rows)  
   *Examples*:  
   .. code-block:: r

      # Create data with NAs
      df <- data.frame(
        x = c(1, 2, NA, 4),
        y = c(5, NA, 7, 8)
      )
      
      # Check complete cases
      complete.cases(df)  # Output: [1] TRUE FALSE FALSE TRUE
      
      # Filter to complete cases only
      df_clean <- df[complete.cases(df), ]
      nrow(df_clean)  # Output: [1] 2
      
      # Count missing
      sum(!complete.cases(df))  # Output: [1] 2
   
   *See also*: ``is.na()``, ``na.omit()``

**ifelse(test, yes, no)**

   *Purpose*: Vectorized conditional operation  
   *Help*: Type ``?ifelse`` in R console  
   *Examples*:  
   .. code-block:: r

      # Basic usage
      score <- c(85, 72, 90, 68, 88)
      grade <- ifelse(score >= 80, "Pass", "Fail")
      grade  # Output: [1] "Pass" "Fail" "Pass" "Fail" "Pass"
      
      # Nested ifelse
      grade <- ifelse(score >= 90, "A",
                     ifelse(score >= 80, "B", 
                           ifelse(score >= 70, "C", "F")))
      
      # With calculations
      df$adjusted <- ifelse(df$group == "control", 
                           df$score * 1.1, 
                           df$score)

**IQR(x, na.rm = FALSE)**

   *Purpose*: Calculate interquartile range (Q3 - Q1)  
   *Help*: Type ``?IQR`` in R console  
   *Examples*:  
   .. code-block:: r

      x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, NA)
      IQR(x)          # Output: NA
      IQR(x, na.rm = TRUE)  # Output: 4
      
      # Compare with quantiles
      quantile(x, c(0.25, 0.75), na.rm = TRUE)
      # 25% 75% 
      # 3   7
   
   *See also*: ``quantile()``, ``fivenum()``, ``boxplot.stats()``

**is.na(x)**

   *Purpose*: Test for missing values  
   *Help*: Type ``?is.na`` in R console  
   *Examples*:  
   .. code-block:: r

      x <- c(1, NA, 3, NA, 5)
      is.na(x)  # Output: [1] FALSE TRUE FALSE TRUE FALSE
      
      # Count NAs
      sum(is.na(x))  # Output: [1] 2
      
      # Find positions of NAs
      which(is.na(x))  # Output: [1] 2 4
      
      # Replace NAs
      x[is.na(x)] <- 0
   
   *See also*: ``complete.cases()``, ``na.omit()``, ``anyNA()``

**paste(..., sep = " ", collapse = NULL)**

   *Purpose*: Concatenate strings  
   *Help*: Type ``?paste`` in R console  
   *Key arguments*:
   
   - ``sep``: Separator between elements
   - ``collapse``: Collapse vector to single string
   
   *Examples*:  
   .. code-block:: r

      # Basic concatenation
      paste("Mean:", 5.2)  # Output: [1] "Mean: 5.2"
      
      # Custom separator
      paste("2024", "01", "15", sep = "-")  # Output: [1] "2024-01-15"
      
      # Vectorized
      paste("Group", 1:3)  # Output: [1] "Group 1" "Group 2" "Group 3"
      
      # Collapse to single string
      paste(c("A", "B", "C"), collapse = ", ")  # Output: [1] "A, B, C"
      
      # No space version
      paste0("var", 1:3)  # Output: [1] "var1" "var2" "var3"

**quantile(x, probs = seq(0, 1, 0.25), na.rm = FALSE)**

   *Purpose*: Calculate sample quantiles  
   *Help*: Type ``?quantile`` in R console  
   *Examples*:  
   .. code-block:: r

      x <- c(1:10, NA)
      
      # Default quartiles
      quantile(x, na.rm = TRUE)
      #   0%  25%  50%  75% 100% 
      #  1.0  3.0  5.5  8.0 10.0
      
      # Custom percentiles
      quantile(x, probs = c(0.1, 0.9), na.rm = TRUE)
      # 10% 90% 
      # 1.9 9.1
      
      # For boxplot values
      quantile(x, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
   
   *See also*: ``median()``, ``IQR()``, ``fivenum()``

**sapply(X, FUN), lapply(X, FUN)**

   *Purpose*: Apply function over list/vector elements  
   *Help*: Type ``?sapply`` or ``?lapply`` in R console  
   *Differences*:
   
   - ``lapply``: Always returns a list
   - ``sapply``: Simplifies to vector/matrix if possible
   
   *Examples*:  
   .. code-block:: r

      # List of vectors
      lst <- list(a = 1:5, b = 6:10, c = 11:15)
      
      # sapply simplifies to vector
      sapply(lst, mean)  # Output: a  b  c 
                        #         3  8 13
      
      # lapply returns list
      lapply(lst, mean)  # Returns list with 3 elements
      
      # Check multiple columns for NAs
      sapply(df, function(x) sum(is.na(x)))

**tapply(X, INDEX, FUN)**

   *Purpose*: Apply function by group  
   *Help*: Type ``?tapply`` in R console  
   *Examples*:  
   .. code-block:: r

      # Group means
      tapply(df$score, df$group, mean)
      #    A    B 
      # 87.5 82.7
      
      # Multiple statistics
      tapply(df$score, df$group, 
             function(x) c(mean = mean(x), sd = sd(x)))
      
      # Two-way grouping
      tapply(df$score, list(df$group, df$platform), mean)
   
   *See also*: ``aggregate()``, ``by()``

Descriptive Statistics & Correlation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**cor(x, y = NULL, use = "everything", method = "pearson")**

   *Purpose*: Calculate correlation coefficient  
   *Help*: Type ``?cor`` in R console  
   *Key arguments*:
   
   - ``use``: How to handle NAs ("complete.obs" drops them)
   - ``method``: "pearson" (default), "spearman", "kendall"
   
   *Examples*:  
   .. code-block:: r

      # Two vectors
      x <- c(1, 2, 3, 4, 5)
      y <- c(2, 4, 6, 8, 10)
      cor(x, y)  # Output: [1] 1 (perfect positive)
      
      # With NAs
      x <- c(1, 2, NA, 4, 5)
      y <- c(2, 4, 6, NA, 10)
      cor(x, y)  # Output: [1] NA
      cor(x, y, use = "complete.obs")  # Output: [1] 1
      
      # Correlation matrix
      cor(df[, c("score", "price", "rating")])
      
      # Test significance
      cor.test(x, y)
   
   *Interpretation*:
   
   - -1 to -0.7: Strong negative
   - -0.7 to -0.3: Moderate negative  
   - -0.3 to 0.3: Weak/no linear relationship
   - 0.3 to 0.7: Moderate positive
   - 0.7 to 1: Strong positive
   
   *See also*: ``cor.test()``, ``cov()``

**mean(x, trim = 0, na.rm = FALSE)**

   *Purpose*: Calculate arithmetic mean  
   *Help*: Type ``?mean`` in R console  
   *Key arguments*:
   
   - ``na.rm``: Remove NAs before calculation
   - ``trim``: Fraction to trim from each end
   
   *Examples*:  
   .. code-block:: r

      x <- c(1, 2, 3, 4, 5, NA)
      mean(x)          # Output: [1] NA
      mean(x, na.rm = TRUE)  # Output: [1] 3
      
      # Trimmed mean (robust to outliers)
      y <- c(1, 2, 3, 4, 100)  # 100 is outlier
      mean(y)          # Output: [1] 22
      mean(y, trim = 0.2)  # Output: [1] 3 (trims 20% each end)
   
   *See also*: ``median()``, ``summary()``

**median(x, na.rm = FALSE)**

   *Purpose*: Calculate median (middle value)  
   *Help*: Type ``?median`` in R console  
   *Examples*:  
   .. code-block:: r

      # Odd number of values
      median(c(1, 3, 5))  # Output: [1] 3
      
      # Even number of values
      median(c(1, 2, 3, 4))  # Output: [1] 2.5
      
      # More robust than mean for skewed data
      x <- c(20, 25, 30, 35, 200)  # 200 is outlier
      mean(x)    # Output: [1] 62
      median(x)  # Output: [1] 30

**sd(x, na.rm = FALSE)**

   *Purpose*: Calculate sample standard deviation  
   *Help*: Type ``?sd`` in R console  
   *Note*: Uses n-1 denominator (sample SD)  
   *Examples*:  
   .. code-block:: r

      x <- c(2, 4, 4, 4, 5, 5, 7, 9)
      sd(x)   # Output: [1] 2.13809
      var(x)  # Output: [1] 4.571429 (variance = sd^2)
      
      # Coefficient of variation (relative variability)
      cv <- sd(x) / mean(x) * 100
      paste("CV:", round(cv, 1), "%")
   
   *See also*: ``var()``, ``mad()`` (robust alternative)

Probability & Distributions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Normal Distribution Functions**

   **dnorm(x, mean = 0, sd = 1)**
   
   *Purpose*: Normal probability density  
   *Help*: Type ``?dnorm`` in R console  
   *Use cases*: Overlay theoretical curves, calculate likelihoods  
   *Examples*:  
   .. code-block:: r

      # Standard normal density at x = 0
      dnorm(0)  # Output: [1] 0.3989423
      
      # Custom parameters
      dnorm(100, mean = 100, sd = 15)  # Output: [1] 0.02659615
      
      # Plot overlay
      ggplot(data.frame(x = x), aes(x)) +
        geom_histogram(aes(y = after_stat(density))) +
        stat_function(fun = dnorm, 
                     args = list(mean = mean(x), sd = sd(x)),
                     color = "red")

   **pnorm(q, mean = 0, sd = 1, lower.tail = TRUE)**
   
   *Purpose*: Normal cumulative distribution (probability)  
   *Help*: Type ``?pnorm`` in R console  
   *Examples*:  
   .. code-block:: r

      # P(Z <= 1.96) for standard normal
      pnorm(1.96)  # Output: [1] 0.9750021
      
      # P(Z > 1.96) 
      pnorm(1.96, lower.tail = FALSE)  # Output: [1] 0.0249979
      
      # Two-tailed p-value
      2 * pnorm(-abs(1.96))  # Output: [1] 0.04999579

   **qnorm(p, mean = 0, sd = 1, lower.tail = TRUE)**
   
   *Purpose*: Normal quantiles (inverse CDF)  
   *Help*: Type ``?qnorm`` in R console  
   *Examples*:  
   .. code-block:: r

      # Critical values
      qnorm(0.975)  # Output: [1] 1.959964 (two-tailed 95%)
      qnorm(0.95)   # Output: [1] 1.644854 (one-tailed 95%)
      
      # Confidence interval
      xbar <- 100; s <- 15; n <- 25
      xbar + c(-1, 1) * qnorm(0.975) * s/sqrt(n)
   
   **rnorm(n, mean = 0, sd = 1)**
   
   *Purpose*: Generate random normal values  
   *Help*: Type ``?rnorm`` in R console  
   *Examples*:  
   .. code-block:: r

      set.seed(123)  # For reproducibility
      x <- rnorm(100, mean = 50, sd = 10)
      hist(x)

**t Distribution Functions**

   **pt(q, df, lower.tail = TRUE)**
   
   *Purpose*: Student's t cumulative distribution  
   *Help*: Type ``?pt`` in R console  
   *Use cases*: Calculate p-values for t-tests  
   *Examples*:  
   .. code-block:: r

      # One-sided p-value
      t_stat <- 2.5
      df <- 24
      pt(t_stat, df, lower.tail = FALSE)  # Output: [1] 0.009963466
      
      # Two-sided p-value
      2 * pt(-abs(t_stat), df)  # Output: [1] 0.01992693

   **qt(p, df, lower.tail = TRUE)**
   
   *Purpose*: Student's t quantiles  
   *Help*: Type ``?qt`` in R console  
   *Use cases*: Critical values for confidence intervals  
   *Examples*:  
   .. code-block:: r

      # 95% CI critical value
      qt(0.975, df = 24)  # Output: [1] 2.063899
      
      # Compare to normal
      qnorm(0.975)  # Output: [1] 1.959964
      # t is larger (heavier tails)

   *See also*: ``dt()``, ``rt()``

**Other Distributions**

   **dbinom(x, size, prob)**
   
   *Purpose*: Binomial probability mass function  
   *Help*: Type ``?dbinom`` in R console  
   *Examples*:  
   .. code-block:: r

      # P(X = 3) for Binomial(n=10, p=0.5)
      dbinom(3, size = 10, prob = 0.5)  # Output: [1] 0.1171875
      
      # Full distribution
      x <- 0:10
      p <- dbinom(x, size = 10, prob = 0.5)
      barplot(p, names.arg = x)

   **qtukey(p, nmeans, df)**
   
   *Purpose*: Tukey HSD critical values  
   *Help*: Type ``?qtukey`` in R console  
   *Examples*:  
   .. code-block:: r

      # Critical value for 3 groups, df = 27
      qtukey(0.95, nmeans = 3, df = 27)  # Output: [1] 3.506426

Simulation Functions
~~~~~~~~~~~~~~~~~~~~~~~~

**set.seed(seed)**

   *Purpose*: Set random number generator seed for reproducibility  
   *Help*: Type ``?set.seed`` in R console  
   *Examples*:  
   .. code-block:: r

      # Without seed - different each time
      rnorm(3)
      rnorm(3)  # Different values
      
      # With seed - reproducible
      set.seed(123)
      rnorm(3)  # Output: [1] -0.5604756 -0.2301775  1.5587083
      set.seed(123)
      rnorm(3)  # Same values!

**Random Generation Functions**

   *Common parameters*: First argument is always ``n`` (number of values)
   
   .. code-block:: r

      # Normal
      set.seed(1)
      rnorm(5, mean = 100, sd = 15)
      
      # Uniform
      runif(5, min = 0, max = 10)
      
      # Exponential
      rexp(5, rate = 2)
      
      # For simulation studies
      n_sims <- 1000
      means <- replicate(n_sims, mean(rnorm(30)))
      hist(means)  # Sampling distribution

Inference Functions
~~~~~~~~~~~~~~~~~~~~~~~~

**t.test(x, y = NULL, alternative = "two.sided", mu = 0, paired = FALSE, var.equal = FALSE, conf.level = 0.95)**

   *Purpose*: One and two sample t-tests  
   *Help*: Type ``?t.test`` in R console  
   *When to use*: Compare means between 1-2 groups  
   *Key arguments*:
   
   - ``alternative``: "two.sided", "less", "greater"
   - ``mu``: Null hypothesis value (one-sample) 
   - ``paired``: TRUE for matched pairs
   - ``var.equal``: TRUE assumes equal variances
   
   *Common pitfalls*:
   
   - Using paired = TRUE with independent samples
   - Not checking normality assumptions
   - Forgetting var.equal = FALSE for unequal variances
   
   *Examples*:  
   .. code-block:: r

      # One-sample test
      x <- c(98, 102, 101, 97, 103, 100, 99, 98, 104, 101)
      t.test(x, mu = 100)
      #
      # One Sample t-test
      #
      # data:  x
      # t = 0.63246, df = 9, p-value = 0.5425
      # alternative hypothesis: true mean is not equal to 100
      # 95 percent confidence interval:
      #  98.41533 102.18467
      # sample estimates:
      # mean of x 
      #     100.3
      
      # Two-sample (independent)
      groupA <- c(85, 88, 90, 92, 87)
      groupB <- c(78, 82, 80, 79, 81)
      t.test(groupA, groupB, var.equal = FALSE)
      
      # Formula interface
      t.test(score ~ group, data = df, var.equal = FALSE)
      
      # Paired test
      before <- c(85, 88, 90, 92, 87)
      after  <- c(88, 90, 91, 94, 89)
      t.test(before, after, paired = TRUE)
      
      # Extract components
      result <- t.test(x, mu = 100)
      result$p.value     # [1] 0.5424805
      result$conf.int    # [1] 98.41533 102.18467
      result$estimate    # mean of x: 100.3
   
   *Checking assumptions*:
   .. code-block:: r

      # Normality
      shapiro.test(x)  # Formal test
      qqnorm(x); qqline(x)  # Visual check
      
      # Equal variances (for two-sample)
      var.test(groupA, groupB)  # F-test
      # Or use Levene's test from car package
   
   *See also*: ``wilcox.test()`` (non-parametric alternative)

**aov(formula, data)**

   *Purpose*: Analysis of variance (ANOVA)  
   *Help*: Type ``?aov`` in R console  
   *When to use*: Compare means across 3+ groups  
   *Examples*:  
   .. code-block:: r

      # One-way ANOVA
      fit <- aov(score ~ group, data = df)
      summary(fit)
      #             Df Sum Sq Mean Sq F value Pr(>F)
      # group        2  520.3  260.15   8.214 0.0019 **
      # Residuals   27  855.2   31.67
      
      # Check assumptions
      plot(fit, which = 1)  # Residuals vs Fitted
      plot(fit, which = 2)  # Normal Q-Q
      
      # Equal variance test
      bartlett.test(score ~ group, data = df)
      
      # Post-hoc comparisons
      TukeyHSD(fit)
      plot(TukeyHSD(fit))
   
   *See also*: ``anova()``, ``TukeyHSD()``, ``kruskal.test()``

**TukeyHSD(x, conf.level = 0.95)**

   *Purpose*: Tukey's honest significant differences  
   *Help*: Type ``?TukeyHSD`` in R console  
   *When to use*: After significant ANOVA for pairwise comparisons  
   *Examples*:  
   .. code-block:: r

      # Following ANOVA
      fit <- aov(score ~ group, data = df)
      tukey_result <- TukeyHSD(fit)
      tukey_result
      #   Tukey multiple comparisons of means
      #     95% family-wise confidence level
      # 
      # $group
      #         diff       lwr      upr     p adj
      # B-A  -5.333 -12.20271 1.536038 0.1518711
      # C-A   3.167  -3.70271 10.036038 0.5019442
      # C-B   8.500   1.63062 15.369376 0.0125506
      
      # Visual display
      plot(tukey_result)
      # Intervals not containing 0 are significant
   
   *Interpretation*: Confidence intervals not containing 0 indicate significant differences

**lm(formula, data)**

   *Purpose*: Fit linear models  
   *Help*: Type ``?lm`` in R console  
   *When to use*: Regression analysis, ANOVA via regression  
   *Examples*:  
   .. code-block:: r

      # Simple linear regression
      mod <- lm(rating ~ price, data = df)
      summary(mod)
      
      # Coefficients:
      #             Estimate Std. Error t value Pr(>|t|)    
      # (Intercept)  2.1234     0.2145   9.897 2.13e-10 ***
      # price        0.5432     0.0532  10.211 9.77e-11 ***
      # 
      # Residual standard error: 1.234 on 28 degrees of freedom
      # Multiple R-squared:  0.7882,	Adjusted R-squared:  0.7806 
      # F-statistic: 104.3 on 1 and 28 DF,  p-value: 9.77e-11
      
      # Extract components
      coef(mod)           # Coefficients
      confint(mod)        # CI for coefficients
      residuals(mod)      # Residuals
      fitted(mod)         # Fitted values
      
      # Diagnostics
      plot(mod)  # 4 diagnostic plots
      
      # ANOVA table
      anova(mod)
   
   *See also*: ``summary.lm()``, ``predict.lm()``, ``plot.lm()``

**predict(object, newdata, interval = "none", level = 0.95)**

   *Purpose*: Predictions from model fits  
   *Help*: Type ``?predict.lm`` in R console  
   *Key arguments*:
   
   - ``interval``: "confidence" (mean response) or "prediction" (new obs)
   - ``level``: Confidence level
   
   *Critical distinction*:
   
   - **Confidence interval**: Uncertainty about mean response
   - **Prediction interval**: Uncertainty about individual response (wider)
   
   *Examples*:  
   .. code-block:: r

      # Fit model
      mod <- lm(rating ~ price, data = df)
      
      # Single prediction
      new_price <- data.frame(price = 50)
      predict(mod, new_price)  # Point estimate
      
      # Confidence interval (mean rating at price = 50)
      predict(mod, new_price, interval = "confidence")
      #        fit      lwr      upr
      # 1 29.28571 28.47933 30.09209
      
      # Prediction interval (individual rating at price = 50)
      predict(mod, new_price, interval = "prediction")
      #        fit      lwr      upr
      # 1 29.28571 26.89414 31.67728
      
      # Multiple predictions for plotting
      new_prices <- data.frame(
        price = seq(min(df$price), max(df$price), length = 100)
      )
      ci <- predict(mod, new_prices, interval = "confidence")
      pi <- predict(mod, new_prices, interval = "prediction")
      
      # Plot with bands
      plot(rating ~ price, data = df)
      abline(mod)
      lines(new_prices$price, ci[,"lwr"], lty = 2, col = "blue")
      lines(new_prices$price, ci[,"upr"], lty = 2, col = "blue")
      lines(new_prices$price, pi[,"lwr"], lty = 2, col = "red")
      lines(new_prices$price, pi[,"upr"], lty = 2, col = "red")
   
   *See also*: ``fitted()``, ``residuals()``

**Diagnostic Plots for Assumptions**

   .. code-block:: r

      # For t-test (normality)
      x <- residuals(lm(score ~ group, data = df))
      qqnorm(x); qqline(x)
      shapiro.test(x)
      
      # For ANOVA
      fit <- aov(score ~ group, data = df)
      plot(fit, which = 1)  # Constant variance
      plot(fit, which = 2)  # Normality
      
      # For regression
      mod <- lm(rating ~ price, data = df)
      par(mfrow = c(2,2))
      plot(mod)  # All 4 diagnostic plots
      par(mfrow = c(1,1))
      
      # Manual residual plots
      plot(fitted(mod), residuals(mod))
      abline(h = 0, lty = 2)
      
      # Check for patterns:
      # - Random scatter: Good
      # - Funnel shape: Heteroscedasticity
      # - Curve: Non-linearity
      # - Outliers: Influential points

Graphics (ggplot2)
~~~~~~~~~~~~~~~~~~~~~~~~

Core Components
~~~~~~~~~~~~~~~~

**ggplot(data, aes(...))**

   *Purpose*: Initialize a ggplot object  
   *Help*: Type ``?ggplot`` in R console  
   *Structure*: Data + aesthetic mappings + layers  
   *Examples*:  
   .. code-block:: r

      library(ggplot2)
      
      # Basic setup
      ggplot(df, aes(x = price, y = rating))
      # Creates blank plot with axes
      
      # Add layers with +
      ggplot(df, aes(x = price, y = rating)) +
        geom_point()
      
      # Save for reuse
      p <- ggplot(df, aes(x = group, y = score))
      p + geom_boxplot()
      p + geom_violin()

**aes(...)**

   *Purpose*: Map variables to visual properties  
   *Help*: Type ``?aes`` in R console  
   *Common aesthetics*: x, y, color, fill, shape, size, alpha  
   *Examples*:  
   .. code-block:: r

      # Position aesthetics
      aes(x = price, y = rating)
      
      # Color by group
      aes(x = price, y = rating, color = platform)
      
      # Multiple aesthetics
      aes(x = price, y = rating, color = platform, size = downloads)
      
      # Can set in ggplot() or individual geoms
      ggplot(df) +
        geom_point(aes(x = price, y = rating))

Geoms (Geometric Objects)
~~~~~~~~~~~~~~~~~~~~~~~~~~

**geom_histogram(binwidth, bins, aes(y = after_stat(...)))**

   *Purpose*: Create histograms  
   *Help*: Type ``?geom_histogram`` in R console  
   *Key arguments*:
   
   - ``bins``: Number of bins (default 30)
   - ``binwidth``: Width of bins
   - ``aes(y = after_stat(density))``: Scale to density
   
   *Examples*:  
   .. code-block:: r

      # Basic histogram
      ggplot(df, aes(x = score)) +
        geom_histogram(bins = 20, fill = "lightblue", color = "black")
      
      # Density scaled (for overlay)
      ggplot(df, aes(x = score)) +
        geom_histogram(aes(y = after_stat(density)), 
                      bins = 20, fill = "lightblue", alpha = 0.7) +
        stat_function(fun = dnorm, 
                     args = list(mean = mean(df$score), 
                                sd = sd(df$score)),
                     color = "red", size = 1)
      
      # By group
      ggplot(df, aes(x = score, fill = group)) +
        geom_histogram(position = "dodge", bins = 15)

**geom_boxplot(outlier.shape, varwidth)**

   *Purpose*: Box and whisker plots  
   *Help*: Type ``?geom_boxplot`` in R console  
   *Examples*:  
   .. code-block:: r

      # Basic boxplot
      ggplot(df, aes(x = group, y = score)) +
        geom_boxplot()
      
      # Horizontal
      ggplot(df, aes(x = group, y = score)) +
        geom_boxplot() +
        coord_flip()
      
      # With points
      ggplot(df, aes(x = group, y = score)) +
        geom_boxplot(outlier.shape = NA) +  # Hide outliers
        geom_jitter(width = 0.2, alpha = 0.5)
      
      # Variable width by sample size
      ggplot(df, aes(x = group, y = score)) +
        geom_boxplot(varwidth = TRUE)

**geom_point(), geom_line()**

   *Purpose*: Scatterplots and line plots  
   *Help*: Type ``?geom_point`` or ``?geom_line``  
   *Examples*:  
   .. code-block:: r

      # Scatterplot
      ggplot(df, aes(x = price, y = rating)) +
        geom_point()
      
      # Customize points
      ggplot(df, aes(x = price, y = rating, color = platform)) +
        geom_point(size = 3, alpha = 0.7)
      
      # Add regression line
      ggplot(df, aes(x = price, y = rating)) +
        geom_point() +
        geom_smooth(method = "lm", se = FALSE, color = "red")
      
      # Time series
      ggplot(ts_data, aes(x = date, y = value)) +
        geom_line() +
        geom_point()

**geom_smooth(method, formula, se)**

   *Purpose*: Add smoothed conditional means  
   *Help*: Type ``?geom_smooth`` in R console  
   *Key arguments*:
   
   - ``method``: "lm", "loess", "gam"
   - ``se``: Show confidence band (TRUE/FALSE)
   
   *Examples*:  
   .. code-block:: r

      # Linear regression line with CI
      ggplot(df, aes(x = price, y = rating)) +
        geom_point() +
        geom_smooth(method = "lm")
      
      # Without CI band
      ggplot(df, aes(x = price, y = rating)) +
        geom_point() +
        geom_smooth(method = "lm", se = FALSE)
      
      # By group
      ggplot(df, aes(x = price, y = rating, color = platform)) +
        geom_point() +
        geom_smooth(method = "lm")

**stat_qq(), stat_qq_line()**

   *Purpose*: Q-Q plots for normality assessment  
   *Help*: Type ``?stat_qq`` in R console  
   *Examples*:  
   .. code-block:: r

      # Basic Q-Q plot
      ggplot(df, aes(sample = score)) +
        stat_qq() +
        stat_qq_line()
      
      # Of residuals
      mod <- lm(rating ~ price, data = df)
      res_df <- data.frame(residuals = residuals(mod))
      
      ggplot(res_df, aes(sample = residuals)) +
        stat_qq() +
        stat_qq_line(color = "red") +
        labs(title = "Normal Q-Q Plot of Residuals")

**geom_ribbon(aes(ymin, ymax))**

   *Purpose*: Area plots with upper/lower bounds  
   *Help*: Type ``?geom_ribbon`` in R console  
   *Use case*: Custom confidence/prediction bands  
   *Examples*:  
   .. code-block:: r

      # Prediction bands for regression
      mod <- lm(rating ~ price, data = df)
      new_data <- data.frame(price = seq(min(df$price), 
                                         max(df$price), 
                                         length = 100))
      
      # Get predictions
      pred_ci <- predict(mod, new_data, interval = "confidence")
      pred_pi <- predict(mod, new_data, interval = "prediction")
      
      # Combine for plotting
      plot_data <- cbind(new_data, 
                        ci_fit = pred_ci[,"fit"],
                        ci_lwr = pred_ci[,"lwr"],
                        ci_upr = pred_ci[,"upr"],
                        pi_lwr = pred_pi[,"lwr"],
                        pi_upr = pred_pi[,"upr"])
      
      # Plot with bands
      ggplot(plot_data, aes(x = price)) +
        geom_ribbon(aes(ymin = pi_lwr, ymax = pi_upr), 
                   fill = "grey90") +
        geom_ribbon(aes(ymin = ci_lwr, ymax = ci_upr), 
                   fill = "grey70") +
        geom_line(aes(y = ci_fit), color = "blue", size = 1) +
        geom_point(data = df, aes(y = rating)) +
        labs(title = "Regression with CI and PI bands")

Plot Customization
~~~~~~~~~~~~~~~~~~~

**Labels and Titles**

   .. code-block:: r

      # All labels at once
      p + labs(title = "Main Title",
              subtitle = "Subtitle",
              x = "X-axis label",
              y = "Y-axis label",
              caption = "Data source: ...")
      
      # Individual functions
      p + ggtitle("Main Title") +
          xlab("X-axis") +
          ylab("Y-axis")
      
      # Math expressions
      library(latex2exp)
      p + xlab(TeX("$\\beta_1$")) +
          ylab(TeX("$\\hat{y}$"))

**Themes**

   .. code-block:: r

      # Built-in themes
      p + theme_minimal()
      p + theme_classic()
      p + theme_bw()
      
      # Customize elements
      p + theme(
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14, face = "bold"),
        plot.title = element_text(size = 16, hjust = 0.5),
        legend.position = "bottom"
      )

**Faceting**

   .. code-block:: r

      # Separate panels by variable
      ggplot(df, aes(x = score)) +
        geom_histogram() +
        facet_wrap(~ group)
      
      # Grid layout
      ggplot(df, aes(x = score)) +
        geom_histogram() +
        facet_grid(platform ~ group)

Tables & Reporting
~~~~~~~~~~~~~~~~~~~~~~~~

**knitr::kable(x, caption, digits, format)**

   *Purpose*: Create formatted tables  
   *Help*: Type ``?knitr::kable`` in R console  
   *Examples*:  
   .. code-block:: r

      library(knitr)
      library(kableExtra)
      
      # Basic table
      summary_table <- aggregate(score ~ group, data = df, 
                                FUN = function(x) c(mean = mean(x), 
                                                   sd = sd(x)))
      kable(summary_table, 
            caption = "Summary Statistics by Group",
            digits = 2)
      
      # Enhanced styling
      kable(summary_table, caption = "Summary by Group") %>%
        kable_styling(bootstrap_options = c("striped", "hover"),
                     full_width = FALSE) %>%
        column_spec(1, bold = TRUE)

**gridExtra::grid.arrange(...)**

   *Purpose*: Arrange multiple plots  
   *Help*: Type ``?gridExtra::grid.arrange``  
   *Examples*:  
   .. code-block:: r

      library(gridExtra)
      
      # Create plots
      p1 <- ggplot(df, aes(x = score)) + 
            geom_histogram() + 
            ggtitle("Distribution")
      
      p2 <- ggplot(df, aes(x = group, y = score)) + 
            geom_boxplot() + 
            ggtitle("By Group")
      
      # Arrange
      grid.arrange(p1, p2, ncol = 2)
      
      # Different layouts
      grid.arrange(p1, p2, p1, p2, 
                  ncol = 2, nrow = 2,
                  top = "Four Panel Display")

Best Practices & Common Pitfalls
=================================

Data Import & Validation
~~~~~~~~~~~~~~~~~~~~~~~~

Always validate after import:
.. code-block:: r

   # Standard validation workflow
   d <- read.csv("data/file.csv")
   
   # 1. Structure check
   str(d)
   
   # 2. First/last rows
   head(d); tail(d)
   
   # 3. Summary statistics
   summary(d)
   
   # 4. Missing values
   sapply(d, function(x) sum(is.na(x)))
   
   # 5. Data types
   sapply(d, class)

Statistical Assumptions
~~~~~~~~~~~~~~~~~~~~~~~

**Before t-tests/ANOVA:**
.. code-block:: r

   # Normality
   hist(x)
   qqnorm(x); qqline(x)
   shapiro.test(x)  # Formal test
   
   # Equal variances (for two-sample)
   var.test(x, y)  # F-test
   # or plot
   boxplot(score ~ group, data = df)

**Before regression:**
.. code-block:: r

   mod <- lm(y ~ x, data = df)
   
   # Four key plots
   par(mfrow = c(2,2))
   plot(mod)
   par(mfrow = c(1,1))
   
   # Check for:
   # 1. Linearity (Residuals vs Fitted)
   # 2. Normality (Q-Q plot)
   # 3. Homoscedasticity (Scale-Location)
   # 4. Influential points (Residuals vs Leverage)

Common Errors to Avoid
~~~~~~~~~~~~~~~~~~~~~~

1. **Factor to numeric conversion**
   .. code-block:: r

      # WRONG
      f <- factor(c("2", "4", "6"))
      as.numeric(f)  # Returns 1, 2, 3!
      
      # CORRECT
      as.numeric(as.character(f))  # Returns 2, 4, 6

2. **Missing data handling**
   .. code-block:: r

      # WRONG - silently propagates NA
      mean(c(1, 2, NA, 4))  # Returns NA
      
      # CORRECT
      mean(c(1, 2, NA, 4), na.rm = TRUE)  # Returns 2.333

3. **Confidence vs Prediction intervals**
   .. code-block:: r

      # CI: Where is the mean?
      predict(mod, newdata, interval = "confidence")
      
      # PI: Where is a new observation?
      predict(mod, newdata, interval = "prediction")
      # PI is always wider!

4. **Multiple testing without adjustment**
   .. code-block:: r

      # After ANOVA, use Tukey HSD
      TukeyHSD(aov_fit)  # Adjusts for multiple comparisons
      
      # Not multiple t-tests without correction!

Workflow Template
~~~~~~~~~~~~~~~~~

.. code-block:: r

   # 1. Setup
   library(ggplot2)
   library(knitr)
   set.seed(123)  # Reproducibility
   
   # 2. Import and validate
   d <- read.csv("data/file.csv", stringsAsFactors = FALSE)
   str(d)
   summary(d)
   
   # 3. Clean
   d_clean <- d[complete.cases(d), ]
   
   # 4. Explore
   ggplot(d_clean, aes(x = x, y = y)) +
     geom_point() +
     theme_minimal()
   
   # 5. Model
   mod <- lm(y ~ x, data = d_clean)
   
   # 6. Diagnose
   plot(mod, which = 1:2)
   
   # 7. Report
   summary(mod)
   kable(tidy(mod), digits = 3)

Appendix: Quick Links
-------------------------------------------------

Setup
~~~~~~~~~~~~

- `Local Install <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Local_Install.html>`_
- `Scholar Access <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Scholar-Access.html>`_

Assignments
~~~~~~~~~~~~

- `CA1 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_1_Tutorial.html>`_ — R/RStudio basics
- `CA2 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_2_Graphical_and_Numerical_Summaries_Tutorial.html>`_ — EDA and summaries
- `CA3 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_3_BasicHypothesisTesting_and_subsetting_Tutorial.html>`_ — Hypothesis testing
- `CA4 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_4_TwoSampleProcedures_Tutorial.html>`_ — Two-sample procedures
- `CA5 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_5_ANOVA_Tutorial.html>`_ — ANOVA
- `CA6 Tutorial <https://treese41528.github.io/STAT350/Computer_Assignment_Tutorials/Computer_Assignment_6_SimpleLinearRegression_Tutorial.html>`_ — Linear regression

Getting Help
~~~~~~~~~~~~

- In R: ``?function_name`` or ``help(function_name)``
- Examples: ``example(function_name)``
- Online: https://www.rdocumentation.org/
- Stack Overflow: https://stackoverflow.com/questions/tagged/r