.. _worksheet7:

Worksheet 7: Continuous Random Variables
========================================

.. admonition:: Learning Objectives 🎯
   :class: info

   • Understand the fundamental differences between discrete and continuous random variables
   • Validate probability density functions using the two key properties
   • Calculate probabilities using integration of PDFs
   • Find constants to make functions valid PDFs
   • Compute expected values and variances for continuous distributions
   • Work with cumulative distribution functions (CDFs)

Introduction
------------

Throughout our exploration of probability, we have primarily focused on discrete random variables whose possible outcomes can be listed and whose probabilities are assigned to those distinct values. However, many real-world phenomena such as measurement data, time intervals, and physical quantities are more naturally modeled by **continuous random variables**. Unlike their discrete counterparts, continuous random variables can take on any value within an interval, and probabilities are determined via integration of a probability density function (PDF) rather than by summation of a probability mass function (PMF). 

In this worksheet, we will introduce the core concepts of continuous random variables in their general form without restricting ourselves to well-known named distributions. We will examine how to define PDFs such that they are valid and explore the utility of cumulative distribution functions (CDFs), and how to compute probabilities and expectations.

Part 1: Probability Density Functions
-------------------------------------

A **continuous random variable** is a random variable that can take on an infinite number of possible values within a given range. Unlike discrete random variables, which have a countable set of possible outcomes, continuous random variables are associated with probability distributions where individual points have zero probability. Instead, probabilities are determined by the probability density function (PDF), and the probability of an event occurring within a given interval is found by integrating the PDF over that interval. The total area under the PDF curve must equal one, ensuring that the variable adheres to probability rules.

A probability distribution for a continuous random variable :math:`X` is given by a smooth curve called a density curve, or **probability density function (pdf)** and is defined as:

.. math::
   f_X(x) = \lim_{\Delta \to 0^+} \frac{P(x < X \leq x + \Delta)}{\Delta}

The **support** of a continuous random variable (r.v.) :math:`X`, is the set of all possible values for which the probability density function is strictly positive:

.. math::
   \text{Supp}(X) = \{x \in \mathbb{R} | f_X(x) > 0\}

This definition formalizes the idea that the PDF describes how probability is distributed around a particular point, rather than assigning probability to any single outcome. It measures how densely probability accumulates near individual values of :math:`x`, much like a derivative in calculus captures the rate of change of a function. However, because a continuous random variable does not assign positive probability to individual points i.e., :math:`P(X = x) = 0`, we compute actual probabilities by integrating over an interval:

.. math::
   P(a < X < b) = \int_a^b f_X(x) dx

**Properties of Valid PDFs**

A probability density function (PDF) must satisfy the following conditions to be considered valid:

1. **Non-Negativity:** The function must always be non-negative for all possible values of :math:`x`, since probabilities cannot be negative.
   
   .. math::
      f_X(x) \geq 0, \forall x \in \mathbb{R}

2. **Total Probability Equals One:** The total area under the probability density curve must be exactly 1, ensuring that the function represents a proper probability distribution.
   
   .. math::
      \int_{-\infty}^{+\infty} f_X(x) dx = 1

Both conditions must be checked before declaring a function to be a valid probability density function. A reasonable approach to checking the first condition (non-negativity) is to analyze the function algebraically by determining its roots and ensuring that :math:`f_X(x) > 0` within its support, since it is defined to be zero elsewhere. Alternatively, the recommended approach in this course is to use graphical verification—provide a rough graph of the function and confirm that it does not dip below zero at any point within the support.

.. note::
   **Review Calculus:** Review basic integration rules with specific focus on:
   
   • Rules for linearity, the power rule, and definite vs. indefinite integrals
   • The Fundamental Theorem of Calculus
   • U-substitution and integration by parts
   • Splitting integrals over multiple subintervals for piecewise functions
   • Integration of common functions: constants, polynomials, exponentials
   
   We will NOT use partial fraction decomposition or trigonometric substitution.

**Question 1:** For the following functions determine if it is a valid probability density function.

a) Is the following function :math:`f_X(x)` a valid pdf?

   .. math::
      f_X(x) = \begin{cases}
      x, & 0 < x < 1 \\
      2 - x, & 1 \leq x < 2 \\
      0, & \text{otherwise}
      \end{cases}


**R Code for Visualization:**

.. code-block:: r

   library(ggplot2)
   # Part (a) - f_X(x)
   x1 <- seq(-0.5, 2.5, by = 0.001)
   f_x <- ifelse(x1 > 0 & x1 < 1, x1,
               ifelse(x1 >= 1 & x1 < 2, 2 - x1, 0))

   df_x <- data.frame(x = x1, f_x = f_x)

   ggplot(df_x, aes(x = x, y = f_x)) +
   geom_line(color = "blue", lwd = 1.2) +
   geom_vline(xintercept = c(0, 1, 2), linetype = "dashed", alpha = 0.5) +
   labs(
      title = expression(paste("Function f"[X], "(x)")),
      x = "x",
      y = expression(f[X](x))
   ) +
   theme_minimal() +
   theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      axis.title = element_text(size = 12)
   ) +
   ylim(0, max(f_x) * 1.1) +
   annotate("text", x = 0.5, y = 0.7, label = "f(x) = x", size = 3) +
   annotate("text", x = 1.5, y = 0.7, label = "f(x) = 2 - x", size = 3)


b) Is the following function :math:`f_Y(y)` a valid pdf?

   .. math::
      f_Y(y) = \begin{cases}
      \frac{5}{y^2}, & y \geq 5 \\
      0, & \text{otherwise}
      \end{cases}


**R Code for Visualization:**

.. code-block:: r
   
   library(ggplot2)
   y1 <- seq(5, 20, by = 0.01)
   f_y <- ifelse(y1 >= 5, 5 / y1^2, 0)

   df_y<- data.frame(y = y1, f_y = f_y)

   ggplot(df_y, aes(x = y, y = f_y)) +
   geom_line(color = "red", size = 1.2) +
   geom_vline(xintercept = 5, linetype = "dashed", alpha = 0.5) +
   labs(
      title = expression(paste("Function f"[Y], "(y)")),
      x = "y",
      y = expression(f[Y](y))
   ) +
   theme_minimal() +
   theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      axis.title = element_text(size = 12)
   ) +
   ylim(0, max(f_y[y1 >= 5]) * 1.1) +
   annotate("text", x = 10, y = 0.1, label = "f(y) = 5/y²", size = 3)



c) Is the following function :math:`f_Z(z)` a valid pdf?

   .. math::
      f_Z(z) = \begin{cases}
      \frac{1}{88}(3z^2 - 9), & 1 \leq z \leq 5 \\
      0, & \text{otherwise}
      \end{cases}


**R Code for Visualization:**

.. code-block:: r
   
   library(ggplot2)
   z1 <- seq(0, 6, by = 0.001)
   f_z <- ifelse(z1 >= 1 & z1 <= 5, (3 * z1^2 - 9) / 88, 0)

   df_z <- data.frame(z = z1, f_z = f_z)

   ggplot(df_z, aes(x = z, y = f_z)) +
   geom_line(color = "darkgreen", size = 1.2) +
   geom_vline(xintercept = c(1, 5), linetype = "dashed", alpha = 0.5) +
   geom_hline(yintercept = 0, color = "black", alpha = 0.3) +
   labs(
      title = expression(paste("Function f"[Z], "(z)")),
      x = "z",
      y = expression(f[Z](z))
   ) +
   theme_minimal() +
   theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      axis.title = element_text(size = 12)
   ) +
   annotate("text", x = 3, y = 0.15, label = "f(z) = 3z^2 - 9, 88", size = 3)


d) Is the following function :math:`f_V(v)` a valid pdf? For this problem first try to rewrite the function in piecewise form.

   .. math::
      f_V(v) = \frac{\lambda}{2} e^{-\lambda|x|}, \quad \forall x \in \mathbb{R} \text{ and } \lambda > 0



**R Code for Visualization:**

.. code-block:: r
   
   library(ggplot2)
   # Choose a value for lambda for visualization
   lambda <- 1  # You can change this value

   v1 <- seq(-5, 5, by = 0.001)
   f_v <- (lambda / 2) * exp(-lambda * abs(v1))

   df_v <- data.frame(v = v1, f_v = f_v)

   ggplot(df_v, aes(x = v, y = f_v)) +
   geom_line(color = "purple", size = 1.2) +
   geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
   labs(
      title = expression(paste("Function f"[V], "(v) with ", lambda, " = 1")),
      x = "v",
      y = expression(f[V](v))
   ) +
   theme_minimal() +
   theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      axis.title = element_text(size = 12)
   ) +
   ylim(0, max(f_v) * 1.1) +
   annotate("text", x = -2.5, y = 0.3, 
            label = "f(v) == frac(lambda, 2) * e^(lambda*v)", parse = TRUE, size = 3) +
   annotate("text", x = 2.5, y = 0.3, 
            label = "f(v) == frac(lambda, 2) * e^(-lambda*v)", parse = TRUE, size = 3)


Part 2: Finding Constants for Valid PDFs
-----------------------------------------

**Question 2:** For the following functions determine the constant that would make them a valid probability density function.

a) Determine the constant :math:`c` that would make :math:`f_X(x)` a valid probability density function.

   .. math::
      f_X(x) = \begin{cases}
      \frac{1}{5}, & -1 \leq x \leq 0 \\
      \frac{1}{5} + cx, & 0 < x \leq 1 \\
      0, & \text{otherwise}
      \end{cases}


**R Code for Visualization:**

.. code-block:: r

   library(ggplot2)
   c_value <- # Provide correct value of the constant
   cat("Part (a): Constant c =", c_value, "\n\n")
   x1 <- seq(-2, 2, by = 0.001)
   f_x <- ifelse(x1 >= -1 & x1 <= 0, 1/5,
               ifelse(x1 > 0 & x1 <= 1, 1/5 + c_value * x1, 0))

   df_x <- data.frame(x = x1, f_x = f_x)
   ggplot(df_x, aes(x = x, y = f_x)) +
   geom_line(color = "blue", lwd = 1.2) +
   geom_vline(xintercept = c(-1, 0, 1), linetype = "dashed", alpha = 0.5) +
   labs(
      title = expression(paste("Probability Density Function f"[X], "(x) with c = ", frac(6, 5))),
      x = "x",
      y = expression(f[X](x))
   ) +
   theme_minimal() +
   theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      axis.title = element_text(size = 12)
   ) +
   ylim(0, max(f_x) * 1.1) +
   annotate("text", x = -0.5, y = 0.25, label = "f(x) = 1/5", size = 3) +
   annotate("text", x = 0.5, y = 0.8, label = "f(x) = 1/5 + (6/5)x", size = 3)



b) Determine the constant :math:`k` that would make :math:`f_Y(y)` a valid probability density function.

   .. math::
      f_Y(y) = \begin{cases}
      k(y - 6), & 6 \leq y \leq 8 \\
      2k, & 8 < y \leq 12 \\
      k(14 - y), & 12 < y \leq 14 \\
      0, & \text{otherwise}
      \end{cases}



**R Code for Visualization:**

.. code-block:: r

   library(ggplot2)
   k_value <- 1/12
   cat("Part (b): Constant k =", k_value, "≈", round(k_value, 4), "\n\n")

   # Part (b) - f_Y(y) 
   y1 <- seq(5, 15, by = 0.001)
   f_y <- ifelse(y1 >= 6 & y1 <= 8, k_value * (y1 - 6),
               ifelse(y1 > 8 & y1 <= 12, 2 * k_value,
                        ifelse(y1 > 12 & y1 <= 14, k_value * (14 - y1), 0)))

   df_y <- data.frame(y = y1, f_y = f_y)

   # Visualization for f_Y(y)
   ggplot(df_y, aes(x = y, y = f_y)) +
   geom_line(color = "red", size = 1.2) +
   geom_vline(xintercept = c(6, 8, 12, 14), linetype = "dashed", alpha = 0.5) +
   labs(
      title = expression(paste("Probability Density Function f"[Y], "(y) with k = ", frac(1, 12))),
      x = "y",
      y = expression(f[Y](y))
   ) +
   theme_minimal() +
   theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      axis.title = element_text(size = 12)
   ) +
   ylim(0, max(f_y) * 1.1) +
   annotate("text", x = 7, y = 0.12, label = "k(y-6)", size = 3) +
   annotate("text", x = 10, y = 0.2, label = "2k", size = 3) +
   annotate("text", x = 13, y = 0.12, label = "k(14-y)", size = 3)


Part 3: Expected Value and Variance
------------------------------------

The **expected value** of a continuous random variable is the continuously weighted average of all values within the support of the random variable.

.. math::
   \mu_X = E[X] = \int_{-\infty}^{+\infty} x f_X(x) dx

The rules we learned about in discrete cases, i.e., linearity of expectation, additivity, and LOTUS also apply in the continuous case. We also have an analogous version of variance in the continuous case:

.. math::
   \sigma_X^2 = \text{Var}(X) = E[(X - \mu_X)^2] = \int_{-\infty}^{+\infty} (x - \mu_X)^2 f_X(x) dx

Which simplifies to:

.. math::
   \text{Var}(X) = E[X^2] - (E[X])^2

Similarly the rules for variance hold in the continuous case, i.e., shifting by a constant does not change variance and if a random variable is scaled by a constant, its variance is scaled by the constant squared: :math:`\text{Var}(aX + b) = a^2\text{Var}(X)`, and the additivity of variance holds when we have independent random variables: :math:`\text{Var}(X + Y) = \text{Var}(X) + \text{Var}(Y)`.

**Question 3:** Determine the expected value and standard deviation for the random variable :math:`X` with pdf given below.

.. math::
   f_X(x) = \begin{cases}
   1/20, & -10 < x \leq -5 \\
   1/4, & -1 < x \leq 1 \\
   1/20, & 5 < x \leq 10 \\
   0, & \text{otherwise}
   \end{cases}

Part 4: Cumulative Distribution Functions
-----------------------------------------

The **Cumulative Distribution Function (CDF)** provides the probability that a random variable :math:`X` is less than or equal to a given value :math:`x`, making it a function of :math:`x`. As the name suggests, the CDF accumulates the probability from the start of the support up to the value :math:`x` rather than simply being an antiderivative of the probability density function (PDF). This distinction is especially important in piecewise PDFs, where we must ensure that the CDF correctly accumulates probability across different regions, maintaining continuity and ensuring that it reaches 1 at the upper bound of the distribution. 

We use :math:`F_X(x)` to denote the CDF for :math:`X` and it must satisfy the following properties:

- The CDF is a **non-decreasing function:** For any :math:`a, b \in \mathbb{R}`, if :math:`a < b`, then :math:`F_X(a) \leq F_X(b)`
- **Limiting behavior:** :math:`\lim_{x \to -\infty} F_X(x) = 0` and :math:`\lim_{x \to +\infty} F_X(x) = 1`
- **Right Continuous Convention:** :math:`\lim_{x \to c^+} F_X(x) = F_X(c)`

**Question 4:** Answer the following questions for the given probability density function :math:`f_X(x)` given below.

.. math::
   f_X(x) = \begin{cases}
   1 - e^{-\frac{1}{4}}, & 0 \leq x \leq 1 \\
   \frac{1}{16} e^{-\frac{x}{16}}, & x \geq 4 \\
   0, & \text{otherwise}
   \end{cases}

a) How many regions would we need to be concerned with for the cumulative distribution function?

b) Find the cumulative distribution function for the random variable :math:`X` defined by the PDF :math:`f_X(x)`.

c) Use the CDF to determine the probability that a trial from this random variable would be less than ½.

d) Use the CDF to evaluate the following probability :math:`P(X > 5)`.

e) Use the CDF to evaluate the following probability :math:`P(X < 5|X > 1)`.

**R Code for Visualizing the PDF/CDF:**

.. code-block:: r

   library(ggplot2)
   library(gridExtra)

   # Define the constant for the first piece
   const1 <- 1 - exp(-1/4)

   # Create x values for plotting
   x_vals <- c(seq(-1, 0, by = 0.001),
               seq(0, 1, by = 0.001),
               seq(1, 4, by = 0.001),
               seq(4, 20, by = 0.001))

   # Define PDF values
   pdf_vals <- ifelse(x_vals >= 0 & x_vals <= 1, const1,
                     ifelse(x_vals >= 4, (1/16) * exp(-x_vals/16), 0))

   # Define CDF values
   cdf_vals <- ifelse(x_vals < 0, 0,
                     ifelse(x_vals >= 0 & x_vals <= 1, const1 * x_vals,
                           ifelse(x_vals > 1 & x_vals < 4, const1,
                                    1 - exp(-x_vals/16))))

   # Create data frames
   df_pdf <- data.frame(x = x_vals, y = pdf_vals)
   df_cdf <- data.frame(x = x_vals, y = cdf_vals)

   # PDF Plot
   plot_pdf <- ggplot(df_pdf, aes(x = x, y = y)) +
   geom_line(color = "blue", size = 1.2) +
   geom_vline(xintercept = c(0, 1, 4), linetype = "dashed", alpha = 0.5) +
   labs(
      title = expression(paste("Probability Density Function f"[X], "(x)")),
      x = "x",
      y = expression(f[X](x))
   ) +
   theme_minimal() +
   theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      axis.title = element_text(size = 12)
   ) +
   ylim(0, max(pdf_vals) * 1.2) +
   xlim(-1, 20)

   # CDF Plot
   plot_cdf <- ggplot(df_cdf, aes(x = x, y = y)) +
   geom_line(color = "red", size = 1.2) +
   geom_vline(xintercept = c(0, 1, 4), linetype = "dashed", alpha = 0.5) +
   geom_hline(yintercept = c(0, const1, 1), linetype = "dotted", alpha = 0.3) +
   labs(
      title = expression(paste("Cumulative Distribution Function F"[X], "(x)")),
      x = "x",
      y = expression(F[X](x))
   ) +
   theme_minimal() +
   theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      axis.title = element_text(size = 12)
   ) +
   ylim(0, 1.1) +
   xlim(-1, 20)
   # Display side-by-side
   grid.arrange(plot_pdf, plot_cdf, ncol = 2)



Key Takeaways
-------------

.. admonition:: Summary 📝
   :class: important
   
   • **Continuous random variables** can take any value in an interval; probabilities are areas under the PDF
   • **Valid PDFs** must be non-negative everywhere and integrate to 1
   • **Individual points** have probability zero: :math:`P(X = x) = 0`
   • **Expected value** and **variance** use integration instead of summation
   • **CDFs** accumulate probability from :math:`-\infty` to :math:`x` and are always non-decreasing
   • For **piecewise PDFs**, carefully handle boundaries when integrating
